import { useState, useCallback } from 'react'
import { Button } from "/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "/components/ui/card"
import { Copy, RefreshCw } from 'lucide-react'

export default function PasswordGenerator() {
  const [password, setPassword] = useState('')
  const [length, setLength] = useState(12)
  const [copied, setCopied] = useState(false)
  const [options, setOptions] = useState({
    uppercase: true,
    lowercase: true,
    numbers: true,
    symbols: true,
    ambiguous: false
  })

  const characterSets = {
    uppercase: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
    lowercase: 'abcdefghijklmnopqrstuvwxyz',
    numbers: '0123456789',
    symbols: '!@#$%^&*()_+-=[]{}|;:,.<>?',
    ambiguous: 'l1Io0O'
  }

  const generatePassword = useCallback(() => {
    let chars = ''
    if (options.uppercase) chars += characterSets.uppercase
    if (options.lowercase) chars += characterSets.lowercase
    if (options.numbers) chars += characterSets.numbers
    if (options.symbols) chars += characterSets.symbols
    
    // Remove ambiguous characters if option is enabled
    if (!options.ambiguous) {
      chars = chars.replace(new RegExp(`[${characterSets.ambiguous}]`, 'g'), '')
    }

    if (!chars) {
      setPassword('')
      return
    }

    const array = new Uint32Array(length)
    window.crypto.getRandomValues(array)
    
    let result = ''
    for (let i = 0; i < length; i++) {
      result += chars[array[i] % chars.length]
    }
    
    setPassword(result)
  }, [length, options])

  const copyToClipboard = () => {
    if (!password) return
    navigator.clipboard.writeText(password)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  const calculateStrength = () => {
    if (!password) return 0
    
    let strength = 0
    // Length contributes up to 50% of strength
    strength += Math.min(password.length / 32, 0.5)
    
    // Character variety contributes the rest
    const types = [
      options.uppercase && /[A-Z]/.test(password),
      options.lowercase && /[a-z]/.test(password),
      options.numbers && /[0-9]/.test(password),
      options.symbols && /[^A-Za-z0-9]/.test(password)
    ].filter(Boolean).length
    
    strength += (types / 4) * 0.5
    
    return Math.min(Math.floor(strength * 100), 100)
  }

  const strength = calculateStrength()
  const strengthColor = strength < 30 ? 'bg-red-500' : 
                       strength < 60 ? 'bg-yellow-500' : 
                       strength < 80 ? 'bg-blue-500' : 'bg-green-500'

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader>
        <CardTitle>Password Generator</CardTitle>
        <CardDescription>Create strong, random passwords</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-6">
          {/* Password Display */}
          <div className="flex items-center gap-2">
            <div className="flex-1 bg-muted p-3 rounded-md font-mono text-lg break-all">
              {password || 'Generate a password'}
            </div>
            <Button 
              size="icon" 
              variant="outline" 
              onClick={copyToClipboard}
              disabled={!password}
              aria-label="Copy password"
            >
              <Copy className="h-4 w-4" />
            </Button>
            <Button 
              size="icon" 
              variant="outline" 
              onClick={generatePassword}
              aria-label="Generate new password"
            >
              <RefreshCw className="h-4 w-4" />
            </Button>
          </div>
          {copied && (
            <div className="text-sm text-green-500 text-center">
              Password copied to clipboard!
            </div>
          )}

          {/* Strength Meter */}
          <div>
            <div className="flex justify-between mb-1">
              <span className="text-sm font-medium">Password Strength</span>
              <span className="text-sm text-muted-foreground">
                {strength < 30 ? 'Weak' : 
                 strength < 60 ? 'Moderate' : 
                 strength < 80 ? 'Strong' : 'Very Strong'}
              </span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className={`h-2 rounded-full ${strengthColor}`}
                style={{ width: `${strength}%` }}
              />
            </div>
          </div>

          {/* Length Slider */}
          <div>
            <label htmlFor="length" className="block text-sm font-medium mb-2">
              Length: {length}
            </label>
            <input
              type="range"
              id="length"
              min="4"
              max="32"
              value={length}
              onChange={(e) => setLength(parseInt(e.target.value))}
              className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
            />
          </div>

          {/* Character Options */}
          <div className="space-y-3">
            <label className="block text-sm font-medium">Character Types</label>
            {Object.entries({
              uppercase: 'Include Uppercase (A-Z)',
              lowercase: 'Include Lowercase (a-z)',
              numbers: 'Include Numbers (0-9)',
              symbols: 'Include Symbols (!@#$)',
              ambiguous: 'Exclude Ambiguous (l1Io0O)'
            }).map(([key, label]) => (
              <div key={key} className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id={key}
                  checked={options[key as keyof typeof options]}
                  onChange={() => {
                    setOptions(prev => ({ ...prev, [key]: !prev[key as keyof typeof options] }))
                  }}
                  className="h-4 w-4 rounded border-gray-300 text-primary focus:ring-primary"
                />
                <label htmlFor={key} className="text-sm">
                  {label}
                </label>
              </div>
            ))}
          </div>

          {/* Generate Button */}
          <Button 
            onClick={generatePassword}
            className="w-full"
          >
            Generate Password
          </Button>
        </div>
      </CardContent>
    </Card>
  )
}
